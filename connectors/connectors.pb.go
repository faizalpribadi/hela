// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectors.proto

package connectors

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Protocol struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_connectors_1c441bd11fd9c0fa, []int{0}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Protocol.Unmarshal(m, b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
}
func (dst *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(dst, src)
}
func (m *Protocol) XXX_Size() int {
	return xxx_messageInfo_Protocol.Size(m)
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Protocol) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type Service struct {
	Ready                bool     `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	StatusCode           int64    `protobuf:"varint,2,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_connectors_1c441bd11fd9c0fa, []int{1}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (dst *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(dst, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *Service) GetStatusCode() int64 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func init() {
	proto.RegisterType((*Protocol)(nil), "connectors.Protocol")
	proto.RegisterType((*Service)(nil), "connectors.Service")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectorHandlerClient is the client API for ConnectorHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectorHandlerClient interface {
	Check(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*Service, error)
}

type connectorHandlerClient struct {
	cc *grpc.ClientConn
}

func NewConnectorHandlerClient(cc *grpc.ClientConn) ConnectorHandlerClient {
	return &connectorHandlerClient{cc}
}

func (c *connectorHandlerClient) Check(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/connectors.ConnectorHandler/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorHandlerServer is the server API for ConnectorHandler service.
type ConnectorHandlerServer interface {
	Check(context.Context, *Protocol) (*Service, error)
}

func RegisterConnectorHandlerServer(s *grpc.Server, srv ConnectorHandlerServer) {
	s.RegisterService(&_ConnectorHandler_serviceDesc, srv)
}

func _ConnectorHandler_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Protocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorHandlerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectors.ConnectorHandler/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorHandlerServer).Check(ctx, req.(*Protocol))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectors.ConnectorHandler",
	HandlerType: (*ConnectorHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ConnectorHandler_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectors.proto",
}

func init() { proto.RegisterFile("connectors.proto", fileDescriptor_connectors_1c441bd11fd9c0fa) }

var fileDescriptor_connectors_1c441bd11fd9c0fa = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0xcf, 0xcb,
	0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x39, 0x72, 0x71, 0x04, 0x80, 0x04, 0x93, 0xf3, 0x73, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x2a,
	0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x45, 0x2e, 0x9e, 0xe2,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0xd4, 0xf8, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0xb0, 0x1c, 0x37,
	0x54, 0xcc, 0x2f, 0x31, 0x37, 0x55, 0xc9, 0x9e, 0x8b, 0x3d, 0x18, 0xc2, 0x15, 0x12, 0xe1, 0x62,
	0x2d, 0x4a, 0x4d, 0x4c, 0xa9, 0x04, 0x1b, 0xc1, 0x11, 0x04, 0xe1, 0x08, 0xc9, 0x71, 0x71, 0x15,
	0x97, 0x24, 0x96, 0x94, 0x16, 0x3b, 0xe7, 0xa7, 0x40, 0x4c, 0x60, 0x0e, 0x42, 0x12, 0x31, 0x72,
	0xe3, 0x12, 0x70, 0x86, 0xb9, 0xc8, 0x23, 0x31, 0x2f, 0x25, 0x27, 0xb5, 0x48, 0xc8, 0x88, 0x8b,
	0xd5, 0x39, 0x23, 0x35, 0x39, 0x5b, 0x48, 0x44, 0x0f, 0xc9, 0xfd, 0x30, 0xa7, 0x4a, 0x09, 0x23,
	0x8b, 0x42, 0x6d, 0x4f, 0x62, 0x03, 0x7b, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x46, 0x52,
	0xff, 0x15, 0xf2, 0x00, 0x00, 0x00,
}
